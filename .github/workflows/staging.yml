name: staging

on: 
  pull_request:
    branches:
      - staging
    types:
      - closed

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STATE: staging
  DOCKER_REGISTRY_NAME: bot-telegram
  DOCKER_COMPOSE_NAME: telegram-project
  DOCKER_APP_NAME: bot-telegram
  SHA_COMMAND: "$(doctl registry repository list-tags bot-telegram --output json  | jq '.[] | select(.tag==\"staging\")' | jq -r \".manifest_digest\")"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Build the docker on specific path
        run: docker build -t ${{ secrets.CONTAINER_REGISTRY_URL }}/$DOCKER_REGISTRY_NAME:$STATE -f ./docker/Dockerfile.stg .
      - name: Install doctl package
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      - name: Login to 'DigitalOcean Container Registry' with short-lived credentials
        run: doctl registry login --expiry-seconds 240
      - name: Check the existing old image with specific tag on 'DigitalOcean'
        id: check_old_image
        run: echo "sha=${{ env.SHA_COMMAND }}" >> $GITHUB_OUTPUT
      - name: Remove old images
        run: >
          if [ ! -z "$(doctl registry repository list-manifests $(echo ${{ env.DOCKER_REGISTRY_NAME }}) | grep "$(echo ${{ env.STATE }})")" ] && [ ! -z "${{ steps.check_old_image.outputs.sha }}" ];
          then doctl registry repository delete-manifest $(echo ${{ env.DOCKER_REGISTRY_NAME }}) $(echo ${{ steps.check_old_image.outputs.sha }}) --force; 
          else echo "No repository"; fi
      - name: Pushing the docker image
        run: docker push ${{ secrets.CONTAINER_REGISTRY_URL }}/$DOCKER_REGISTRY_NAME:$STATE
      - name: Logout from 'DigitalOcean'
        run: doctl registry logout

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_STAGING_PRIVATE_KEY }}
          known_hosts: "just-a-placeholder-so-we-dont-get-errors"
      - name: Adding known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_STAGING_HOST }} >> ~/.ssh/known_hosts
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Transfer files to remote machine
        run: |
          rsync -az ./docker/docker-compose.stg.yml ./docker/env.stg ${{ secrets.SSH_STAGING_USERNAME }}@${{ secrets.SSH_STAGING_HOST }}:${{ secrets.REMOTE_STAGING_APP_DIRECTORY }}
      - name: Deploy the application
        uses: appleboy/ssh-action@master
        env:
          APP_DIRECTORY: ${{ secrets.REMOTE_STAGING_FULL_DIRECTORY }}
          CONTAINER_REGISTRY_USR: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          CONTAINER_REGISTRY_PWD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          CONTAINER_REGISTRY_URL: ${{ secrets.CONTAINER_REGISTRY_URL }}
          DOCKER_REGISTRY_NAME: ${{ env.DOCKER_REGISTRY_NAME }}
          DOCKER_COMPOSE_NAME: ${{ env.DOCKER_COMPOSE_NAME }}
          DOCKER_APP_NAME: ${{ env.DOCKER_APP_NAME }}
          STATE: ${{ env.STATE }}
          DOCKER_TRAEFIK_NAME: traefik
        with:
          host: ${{ secrets.SSH_STAGING_HOST }}
          username: ${{ secrets.SSH_STAGING_USERNAME }}
          key: ${{ secrets.SSH_STAGING_PRIVATE_KEY }}
          port: 22
          envs: APP_DIRECTORY,CONTAINER_REGISTRY_USR,CONTAINER_REGISTRY_PWD,CONTAINER_REGISTRY_URL,DOCKER_REGISTRY_NAME,DOCKER_COMPOSE_NAME,DOCKER_APP_NAME,STATE,DOCKER_TRAEFIK_NAME
          script: |
            [ -d "$APP_DIRECTORY/" ] && echo "Directory $APP_DIRECTORY/ exists." || mkdir $APP_DIRECTORY
            cd $APP_DIRECTORY
            ls -lha
            rm -rf $APP_DIRECTORY/.env $APP_DIRECTORY/docker-compose.yml 
            mv $APP_DIRECTORY/docker-compose.stg.yml $APP_DIRECTORY/docker-compose.yml
            mv $APP_DIRECTORY/env.stg $APP_DIRECTORY/.env
            docker login -u $CONTAINER_REGISTRY_USR -p $CONTAINER_REGISTRY_PWD $CONTAINER_REGISTRY_URL
            docker pull $CONTAINER_REGISTRY_URL/$DOCKER_REGISTRY_NAME:$STATE
            docker logout
            docker network create --driver bridge traefik || echo "The traefik network already exists"
            docker-compose -p $DOCKER_COMPOSE_NAME up -d
            sleep 10
            docker restart $DOCKER_TRAEFIK_NAME
      